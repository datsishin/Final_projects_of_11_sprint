from django.db.models import Avgfrom rest_framework import serializersfrom api.titles.models import Category, Genre, Titles, Review, Commentclass CategorySerializer(serializers.ModelSerializer):    class Meta:        model = Category        fields = ('name', 'slug',)class GenreSerializer(serializers.ModelSerializer):    class Meta:        model = Genre        fields = ('name', 'slug',)class TitlesSerializer(serializers.ModelSerializer):    genre = GenreSerializer(many=True)    category = CategorySerializer()    rating = serializers.SerializerMethodField(read_only=True, default=None)    class Meta:        model = Titles        fields = ('id', 'name', 'year', 'rating', 'description', 'genre', 'category',)    def get_rating(self, id):        if id:            score = Review.objects.filter(title_id=id).aggregate(Avg('score')).get('score__avg')            if score is None:                return None            return scoreclass TitlesWriteSerializer(serializers.ModelSerializer):    genre = serializers.SlugRelatedField(slug_field='slug', many=True, queryset=Genre.objects.all())    category = serializers.SlugRelatedField(slug_field='slug', many=False, queryset=Category.objects.all())    class Meta:        model = Titles        fields = ('id', 'name', 'year', 'description', 'genre', 'category',)class ReviewSerializer(serializers.ModelSerializer):    author = serializers.ReadOnlyField(source='author.username')    score = serializers.IntegerField(min_value=1, max_value=10)    class Meta:        model = Review        exclude = ('title',)class CommentSerializer(serializers.ModelSerializer):    author = serializers.ReadOnlyField(source='author.username')    class Meta:        model = Comment        exclude = ('review',)